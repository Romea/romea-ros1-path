#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Point
from nav_msgs.msg import Odometry

from romea_path_tools.path_v2 import Path


class Recorder:
  def __init__(self):
    self.filename  = rospy.get_param('~output')
    min_dist       = rospy.get_param('~minimal_distance_between_two_points', 0.2)
    self.min_speed = rospy.get_param('~minimal_vehicle_speed_to_insert_point', 0.1)
    anchor         = rospy.get_param('~anchor')

    self.odom_sub = rospy.Subscriber('odom', Odometry, self.odom_callback, queue_size=1)

    self.path = Path()
    self.path.anchor = anchor
    self.path.columns = ['x', 'y', 'speed']

    self.previous_pos = Point()
    self.previous_speed = 0.
    self.min_dist_squared = min_dist * min_dist


  def odom_callback(self, msg: Odometry):
    pos = msg.pose.pose.position
    speed = msg.twist.twist.linear.x

    if self.check_dist(pos) and abs(speed) >= self.min_speed:
      # when the sign of the speed change, create a new section
      if (speed >= 0) != (self.previous_speed >= 0):
        self.path.append_section([])

      self.path.append_point([round(pos.x, 3), round(pos.y, 3), round(speed, 3)])
      self.previous_pos = pos
      self.previous_speed = speed


  def check_dist(self, pos: Point):
    diff_x = pos.x - self.previous_pos.x
    diff_y = pos.y - self.previous_pos.y
    squared_dist = diff_x * diff_x + diff_y * diff_y
    return squared_dist >= self.min_dist_squared


  def save(self):
    self.path.save(self.filename)


if __name__ == '__main__':
  rospy.init_node('path_recorder')
  recorder = Recorder()
  rospy.spin()
  rospy.loginfo('node interrupted, saving trajectory...')
  recorder.save()
